// Code generated by Kitex v0.5.2. DO NOT EDIT.

package userservice

import (
	"context"
	testuser "github.com/IPAM/kitex_gen/testUser"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*testuser.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateUser": kitex.NewMethodInfo(createUserHandler, newUserServiceCreateUserArgs, newUserServiceCreateUserResult, false),
		"MGetUser":   kitex.NewMethodInfo(mGetUserHandler, newUserServiceMGetUserArgs, newUserServiceMGetUserResult, false),
		"CheckUser":  kitex.NewMethodInfo(checkUserHandler, newUserServiceCheckUserArgs, newUserServiceCheckUserResult, false),
		"QueryUser":  kitex.NewMethodInfo(queryUserHandler, newUserServiceQueryUserArgs, newUserServiceQueryUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "testuser",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*testuser.UserServiceCreateUserArgs)
	realResult := result.(*testuser.UserServiceCreateUserResult)
	success, err := handler.(testuser.UserService).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCreateUserArgs() interface{} {
	return testuser.NewUserServiceCreateUserArgs()
}

func newUserServiceCreateUserResult() interface{} {
	return testuser.NewUserServiceCreateUserResult()
}

func mGetUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*testuser.UserServiceMGetUserArgs)
	realResult := result.(*testuser.UserServiceMGetUserResult)
	success, err := handler.(testuser.UserService).MGetUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceMGetUserArgs() interface{} {
	return testuser.NewUserServiceMGetUserArgs()
}

func newUserServiceMGetUserResult() interface{} {
	return testuser.NewUserServiceMGetUserResult()
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*testuser.UserServiceCheckUserArgs)
	realResult := result.(*testuser.UserServiceCheckUserResult)
	success, err := handler.(testuser.UserService).CheckUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCheckUserArgs() interface{} {
	return testuser.NewUserServiceCheckUserArgs()
}

func newUserServiceCheckUserResult() interface{} {
	return testuser.NewUserServiceCheckUserResult()
}

func queryUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*testuser.UserServiceQueryUserArgs)
	realResult := result.(*testuser.UserServiceQueryUserResult)
	success, err := handler.(testuser.UserService).QueryUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceQueryUserArgs() interface{} {
	return testuser.NewUserServiceQueryUserArgs()
}

func newUserServiceQueryUserResult() interface{} {
	return testuser.NewUserServiceQueryUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, req *testuser.CreateUserRequest) (r *testuser.CreateUserResponse, err error) {
	var _args testuser.UserServiceCreateUserArgs
	_args.Req = req
	var _result testuser.UserServiceCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetUser(ctx context.Context, req *testuser.MGetUserRequest) (r *testuser.MGetUserResponse, err error) {
	var _args testuser.UserServiceMGetUserArgs
	_args.Req = req
	var _result testuser.UserServiceMGetUserResult
	if err = p.c.Call(ctx, "MGetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUser(ctx context.Context, req *testuser.CheckUserRequest) (r *testuser.CheckUserResponse, err error) {
	var _args testuser.UserServiceCheckUserArgs
	_args.Req = req
	var _result testuser.UserServiceCheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUser(ctx context.Context, req *testuser.QueryUserRequest) (r *testuser.QueryUserResponse, err error) {
	var _args testuser.UserServiceQueryUserArgs
	_args.Req = req
	var _result testuser.UserServiceQueryUserResult
	if err = p.c.Call(ctx, "QueryUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
