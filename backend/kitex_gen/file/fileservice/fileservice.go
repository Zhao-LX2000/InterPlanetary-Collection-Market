// Code generated by Kitex v0.5.2. DO NOT EDIT.

package fileservice

import (
	"context"
	file "github.com/IPAM/kitex_gen/file"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return fileServiceServiceInfo
}

var fileServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FileService"
	handlerType := (*file.FileService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UploadCollection":            kitex.NewMethodInfo(uploadCollectionHandler, newFileServiceUploadCollectionArgs, newFileServiceUploadCollectionResult, false),
		"GetCollectionListCollection": kitex.NewMethodInfo(getCollectionListCollectionHandler, newFileServiceGetCollectionListCollectionArgs, newFileServiceGetCollectionListCollectionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "file",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func uploadCollectionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*file.FileServiceUploadCollectionArgs)
	realResult := result.(*file.FileServiceUploadCollectionResult)
	success, err := handler.(file.FileService).UploadCollection(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFileServiceUploadCollectionArgs() interface{} {
	return file.NewFileServiceUploadCollectionArgs()
}

func newFileServiceUploadCollectionResult() interface{} {
	return file.NewFileServiceUploadCollectionResult()
}

func getCollectionListCollectionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*file.FileServiceGetCollectionListCollectionArgs)
	realResult := result.(*file.FileServiceGetCollectionListCollectionResult)
	success, err := handler.(file.FileService).GetCollectionListCollection(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFileServiceGetCollectionListCollectionArgs() interface{} {
	return file.NewFileServiceGetCollectionListCollectionArgs()
}

func newFileServiceGetCollectionListCollectionResult() interface{} {
	return file.NewFileServiceGetCollectionListCollectionResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UploadCollection(ctx context.Context, req *file.UploadCollectionRequest) (r *file.UploadCollectionResponse, err error) {
	var _args file.FileServiceUploadCollectionArgs
	_args.Req = req
	var _result file.FileServiceUploadCollectionResult
	if err = p.c.Call(ctx, "UploadCollection", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCollectionListCollection(ctx context.Context, req *file.GetCollectionListRequest) (r *file.GetCollectionListResponse, err error) {
	var _args file.FileServiceGetCollectionListCollectionArgs
	_args.Req = req
	var _result file.FileServiceGetCollectionListCollectionResult
	if err = p.c.Call(ctx, "GetCollectionListCollection", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
