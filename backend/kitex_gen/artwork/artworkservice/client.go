// Code generated by Kitex v0.5.1. DO NOT EDIT.

package artworkservice

import (
	"context"
	artwork "github.com/IPAM/kitex_gen/artwork"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	BuyArtwork(ctx context.Context, req *artwork.BuyArtworkRequest, callOptions ...callopt.Option) (r *artwork.BuyArtworkResponse, err error)
	BuyCollection(ctx context.Context, req *artwork.BuyCollectionRequest, callOptions ...callopt.Option) (r *artwork.BuyCollectionResponse, err error)
	GetOwnerArtwork(ctx context.Context, req *artwork.GetOwnerArtworkRequest, callOptions ...callopt.Option) (r *artwork.GetOwnerArtworkResponse, err error)
	GetOwnerBalance(ctx context.Context, req *artwork.GetOwnerBalanceRequest, callOptions ...callopt.Option) (r *artwork.GetOwnerBalanceResponse, err error)
	GetEthBalance(ctx context.Context, req *artwork.GetEthBalanceRequest, callOptions ...callopt.Option) (r *artwork.GetEthBalanceResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kArtworkServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kArtworkServiceClient struct {
	*kClient
}

func (p *kArtworkServiceClient) BuyArtwork(ctx context.Context, req *artwork.BuyArtworkRequest, callOptions ...callopt.Option) (r *artwork.BuyArtworkResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BuyArtwork(ctx, req)
}

func (p *kArtworkServiceClient) BuyCollection(ctx context.Context, req *artwork.BuyCollectionRequest, callOptions ...callopt.Option) (r *artwork.BuyCollectionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BuyCollection(ctx, req)
}

func (p *kArtworkServiceClient) GetOwnerArtwork(ctx context.Context, req *artwork.GetOwnerArtworkRequest, callOptions ...callopt.Option) (r *artwork.GetOwnerArtworkResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetOwnerArtwork(ctx, req)
}

func (p *kArtworkServiceClient) GetOwnerBalance(ctx context.Context, req *artwork.GetOwnerBalanceRequest, callOptions ...callopt.Option) (r *artwork.GetOwnerBalanceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetOwnerBalance(ctx, req)
}

func (p *kArtworkServiceClient) GetEthBalance(ctx context.Context, req *artwork.GetEthBalanceRequest, callOptions ...callopt.Option) (r *artwork.GetEthBalanceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetEthBalance(ctx, req)
}
