// Code generated by Kitex v0.5.1. DO NOT EDIT.

package artworkservice

import (
	"context"
	artwork "github.com/IPAM/kitex_gen/artwork"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return artworkServiceServiceInfo
}

var artworkServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ArtworkService"
	handlerType := (*artwork.ArtworkService)(nil)
	methods := map[string]kitex.MethodInfo{
		"BuyArtwork":      kitex.NewMethodInfo(buyArtworkHandler, newArtworkServiceBuyArtworkArgs, newArtworkServiceBuyArtworkResult, false),
		"BuyCollection":   kitex.NewMethodInfo(buyCollectionHandler, newArtworkServiceBuyCollectionArgs, newArtworkServiceBuyCollectionResult, false),
		"GetOwnerArtwork": kitex.NewMethodInfo(getOwnerArtworkHandler, newArtworkServiceGetOwnerArtworkArgs, newArtworkServiceGetOwnerArtworkResult, false),
		"GetOwnerBalance": kitex.NewMethodInfo(getOwnerBalanceHandler, newArtworkServiceGetOwnerBalanceArgs, newArtworkServiceGetOwnerBalanceResult, false),
		"GetEthBalance":   kitex.NewMethodInfo(getEthBalanceHandler, newArtworkServiceGetEthBalanceArgs, newArtworkServiceGetEthBalanceResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "artwork",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func buyArtworkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*artwork.ArtworkServiceBuyArtworkArgs)
	realResult := result.(*artwork.ArtworkServiceBuyArtworkResult)
	success, err := handler.(artwork.ArtworkService).BuyArtwork(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArtworkServiceBuyArtworkArgs() interface{} {
	return artwork.NewArtworkServiceBuyArtworkArgs()
}

func newArtworkServiceBuyArtworkResult() interface{} {
	return artwork.NewArtworkServiceBuyArtworkResult()
}

func buyCollectionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*artwork.ArtworkServiceBuyCollectionArgs)
	realResult := result.(*artwork.ArtworkServiceBuyCollectionResult)
	success, err := handler.(artwork.ArtworkService).BuyCollection(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArtworkServiceBuyCollectionArgs() interface{} {
	return artwork.NewArtworkServiceBuyCollectionArgs()
}

func newArtworkServiceBuyCollectionResult() interface{} {
	return artwork.NewArtworkServiceBuyCollectionResult()
}

func getOwnerArtworkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*artwork.ArtworkServiceGetOwnerArtworkArgs)
	realResult := result.(*artwork.ArtworkServiceGetOwnerArtworkResult)
	success, err := handler.(artwork.ArtworkService).GetOwnerArtwork(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArtworkServiceGetOwnerArtworkArgs() interface{} {
	return artwork.NewArtworkServiceGetOwnerArtworkArgs()
}

func newArtworkServiceGetOwnerArtworkResult() interface{} {
	return artwork.NewArtworkServiceGetOwnerArtworkResult()
}

func getOwnerBalanceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*artwork.ArtworkServiceGetOwnerBalanceArgs)
	realResult := result.(*artwork.ArtworkServiceGetOwnerBalanceResult)
	success, err := handler.(artwork.ArtworkService).GetOwnerBalance(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArtworkServiceGetOwnerBalanceArgs() interface{} {
	return artwork.NewArtworkServiceGetOwnerBalanceArgs()
}

func newArtworkServiceGetOwnerBalanceResult() interface{} {
	return artwork.NewArtworkServiceGetOwnerBalanceResult()
}

func getEthBalanceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*artwork.ArtworkServiceGetEthBalanceArgs)
	realResult := result.(*artwork.ArtworkServiceGetEthBalanceResult)
	success, err := handler.(artwork.ArtworkService).GetEthBalance(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArtworkServiceGetEthBalanceArgs() interface{} {
	return artwork.NewArtworkServiceGetEthBalanceArgs()
}

func newArtworkServiceGetEthBalanceResult() interface{} {
	return artwork.NewArtworkServiceGetEthBalanceResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) BuyArtwork(ctx context.Context, req *artwork.BuyArtworkRequest) (r *artwork.BuyArtworkResponse, err error) {
	var _args artwork.ArtworkServiceBuyArtworkArgs
	_args.Req = req
	var _result artwork.ArtworkServiceBuyArtworkResult
	if err = p.c.Call(ctx, "BuyArtwork", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BuyCollection(ctx context.Context, req *artwork.BuyCollectionRequest) (r *artwork.BuyCollectionResponse, err error) {
	var _args artwork.ArtworkServiceBuyCollectionArgs
	_args.Req = req
	var _result artwork.ArtworkServiceBuyCollectionResult
	if err = p.c.Call(ctx, "BuyCollection", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOwnerArtwork(ctx context.Context, req *artwork.GetOwnerArtworkRequest) (r *artwork.GetOwnerArtworkResponse, err error) {
	var _args artwork.ArtworkServiceGetOwnerArtworkArgs
	_args.Req = req
	var _result artwork.ArtworkServiceGetOwnerArtworkResult
	if err = p.c.Call(ctx, "GetOwnerArtwork", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOwnerBalance(ctx context.Context, req *artwork.GetOwnerBalanceRequest) (r *artwork.GetOwnerBalanceResponse, err error) {
	var _args artwork.ArtworkServiceGetOwnerBalanceArgs
	_args.Req = req
	var _result artwork.ArtworkServiceGetOwnerBalanceResult
	if err = p.c.Call(ctx, "GetOwnerBalance", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetEthBalance(ctx context.Context, req *artwork.GetEthBalanceRequest) (r *artwork.GetEthBalanceResponse, err error) {
	var _args artwork.ArtworkServiceGetEthBalanceArgs
	_args.Req = req
	var _result artwork.ArtworkServiceGetEthBalanceResult
	if err = p.c.Call(ctx, "GetEthBalance", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
